{"version":3,"sources":["store/utils.js","store/quiz/selectors.ts","components/Header.jsx","store/quiz/api.ts","store/quiz/actions.ts","store/quiz/thunk.ts","components/CustomizeModal.jsx","components/StartScreen.jsx","components/ScoreScreen.jsx","components/Question.jsx","utils/PrivateRoute.jsx","App.js","store/quiz/reducers.ts","store/store.ts","serviceWorker.js","index.js"],"names":["root","getInArity2","path","map","reduce","acc","step","getIn","getInArity1","identity","x","createAction","type","payloadKey","action","payload","meta","toString","createSelector","transformationFn","state","getQuestions","getToken","getStatus","getDifficulty","getNumberOfQuestions","getQuizHeader","getQuizDetails","createCachedSelector","numberOfQuestions","difficulty","token","status","getQuestion","_","idx","questions","Header","header","useSelector","Row","className","fetchQuestions","amount","axios","get","SET_FETCHED_QUESTIONS","setFetchedQuestions","SET_QUESTION_RESPONSE","setQuestionResponse","setQuizHeader","SET_QUIZ_DETAILS","setQuizDetails","HANDLE_API_ERROR","handleApiError","HANDLE_API_FETCHING","handleApiFetching","SET_API_TOKEN","setApiToken","RESET_QUIZ","fetchQuestionsThunk","dispatch","getState","a","actions","then","data","results","CustomizeModal","modalOpen","toggleModalOpen","submit","useState","number","form","setForm","useDispatch","Modal","isOpen","toggle","ModalHeader","ModalBody","InputGroup","Label","Col","sm","Input","value","onChange","e","target","handleNumberInput","placeholder","for","name","id","ModalFooter","Button","color","onClick","StartScreen","history","useHistory","handleSubmit","push","ScoreScreen","useEffect","filter","q","correct_answer","response","length","class","ListGroup","correct","ListGroupItem","ListGroupItemHeading","icon","faCheckCircle","faTimesCircle","size","parse","question","ListGroupItemText","Question","useParams","parsedIdx","Number","parseInt","category","handleClick","nextIdx","Card","PrivateRoute","children","rest","auth","render","location","to","pathname","App","catch","err","Container","message","reducer","produce","base","store","configureStore","quiz","quizReducer","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e069dd10.chunk.js","sourcesContent":["const getInArity2 = (path, map) => {\n  return path.reduce((acc, step) => {\n    if (!acc) return undefined;\n    return acc[step];\n  }, map);\n};\nconst getInArity1 = (path) => (map) => getInArity2(path, map);\n\nconst getIn = (path, map) => {\n  if (map) return getInArity2(path, map);\n  return getInArity1(path);\n};\n\nconst identity = (x) => x;\n\nexport const createAction = (type, payloadKey = \"payload\") => {\n  const action = (payload, meta = {}) => ({\n    type,\n    [payloadKey]: payload,\n    meta,\n  });\n\n  action.toString = () => type;\n\n  return action;\n};\n\nexport const createSelector = (path, transformationFn = identity) => (state) =>\n  transformationFn(getIn(path, state), state);\n\nexport const createSelectorContext = (root) => (path, transformationFn) => {\n  if (typeof path === \"string\")\n    return createSelector([...root, path], transformationFn);\n  return createSelector([...root, ...path], transformationFn);\n};\n\nexport const convertArrayToObject = (array, key) => {\n  const initialValue = {};\n  return array.reduce((obj, item) => {\n    return {\n      ...obj,\n      [item[key]]: item,\n    };\n  }, initialValue);\n};\n","import { createSelector as createCachedSelector } from \"reselect\";\nimport { createSelectorContext } from \"../utils\";\n\nconst createSelector = createSelectorContext([\"quiz\"]);\n\nexport const getQuestions = createSelector(\"questions\");\nexport const getToken = createSelector(\"token\");\nexport const getStatus = createSelector(\"status\");\nexport const getErrorMessage = createSelector(\"message\");\nexport const getDifficulty = createSelector(\"difficulty\");\nexport const getNumberOfQuestions = createSelector(\"numberOfQuestions\");\nexport const getQuizHeader = createSelector(\"header\");\n\nexport const getQuizDetails = createCachedSelector(\n  getNumberOfQuestions,\n  getDifficulty,\n  getToken,\n  getStatus,\n  (\n    numberOfQuestions: any,\n    difficulty: string,\n    token: string,\n    status: string\n  ) => {\n    return { numberOfQuestions, difficulty, token, status };\n  }\n);\n\nexport const getQuestion = createCachedSelector(\n  getQuestions,\n  (_: any, idx: number) => idx,\n  (questions: any, idx: number) => {\n    return questions[idx - 1];\n  }\n);\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { getQuizHeader } from \"../store/quiz/selectors\";\n\nimport { Row } from \"reactstrap\";\n\nconst Header = () => {\n  const header = useSelector((state) => getQuizHeader(state));\n\n  return (\n    <Row className=\"d-flex justify-content-center mt-1\">\n      <h1 className=\"text-align-center\">{header}</h1>\n    </Row>\n  );\n};\n\nexport default Header;\n","import axios from \"axios\";\n\nexport const fetchQuestions = (\n  difficulty: string,\n  amount: number = 10,\n  token: string\n) => {\n  return axios.get(\n    `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=boolean&token=${token}`\n  );\n};\n\nexport const fetchSessionToken = () => {\n  return axios.get(`https://opentdb.com/api_token.php?command=request`);\n};\n","import { createAction } from \"../utils\";\n\nexport const SET_FETCHED_QUESTIONS = \"SET_FETCHED_QUESTIONS\";\nexport const setFetchedQuestions = createAction(SET_FETCHED_QUESTIONS);\n\nexport const SET_QUESTION_RESPONSE = \"SET_QUESTION_RESPONSE\";\nexport const setQuestionResponse = createAction(SET_QUESTION_RESPONSE);\n\nexport const SET_QUIZ_HEADER = \"SET_QUIZ_HEADER\";\nexport const setQuizHeader = createAction(\"SET_QUIZ_HEADER\");\n\nexport const SET_QUIZ_DETAILS = \"SET_QUIZ_DETAILS\";\nexport const setQuizDetails = createAction(SET_QUIZ_DETAILS);\n\nexport const HANDLE_API_ERROR = \"HANDLE_API_ERROR\";\nexport const handleApiError = createAction(HANDLE_API_ERROR);\n\nexport const HANDLE_API_FETCHING = \"HANDLE_API_FETCHING\";\nexport const handleApiFetching = createAction(HANDLE_API_FETCHING);\n\nexport const SET_API_TOKEN = \"SET_API_TOKEN\";\nexport const setApiToken = createAction(SET_API_TOKEN);\n\nexport const RESET_QUIZ = \"RESET_QUIZ\";\nexport const resetQuiz = createAction(RESET_QUIZ);\n","import { Dispatch } from \"redux\";\nimport { fetchQuestions, fetchSessionToken } from \"./api\";\n\nimport * as actions from \"./actions\";\nimport { getQuizDetails } from \"./selectors\";\n\nexport const fetchSessionTokenThunk = () => async (dispatch: Dispatch) => {\n  dispatch(actions.handleApiFetching());\n\n  return fetchSessionToken()\n    .then(({ data }) => {\n      dispatch(actions.setApiToken(data.token));\n    })\n    .catch((err) => {\n      dispatch(actions.handleApiError(err));\n    });\n};\n\nexport const fetchQuestionsThunk = () => async (\n  dispatch: Dispatch,\n  getState: Function\n) => {\n  const state = getState();\n  const { token, numberOfQuestions, difficulty } = getQuizDetails(state);\n  dispatch(actions.handleApiFetching());\n\n  return fetchQuestions(difficulty, numberOfQuestions, token).then(\n    ({ data }) => {\n      dispatch(actions.setFetchedQuestions(data.results));\n    }\n  );\n};\n","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  InputGroup,\n  Input,\n  Label,\n  Col,\n} from \"reactstrap\";\nimport { setQuizDetails } from \"../store/quiz/actions\";\n\nconst CustomizeModal = ({ modalOpen, toggleModalOpen, submit }) => {\n  const [form, setForm] = useState({ number: 10, difficulty: \"hard\" });\n  const dispatch = useDispatch();\n\n  const handleSubmit = () => {\n    dispatch(setQuizDetails(form));\n    submit();\n    toggleModalOpen();\n  };\n\n  const handleNumberInput = (e) => {\n    const value = e.target.value;\n    setForm({ ...form, number: value > 50 ? 50 : value });\n  };\n\n  return (\n    <Modal isOpen={modalOpen} toggle={toggleModalOpen}>\n      <ModalHeader>Customize Quiz</ModalHeader>\n      <ModalBody>\n        <InputGroup className=\"justify-content-center\">\n          <Label>Number of Questions</Label>\n          <Col sm={12}>\n            <Input\n              type=\"number\"\n              value={form.number}\n              onChange={(e) => handleNumberInput(e)}\n              placeholder=\"Max 50 Questions\"\n            />\n          </Col>\n        </InputGroup>\n        <InputGroup className=\"mt-4 justify-content-center\">\n          <Label for=\"exampleSelectMulti\">Difficulty</Label>\n          <Col sm={12}>\n            <Input\n              type=\"select\"\n              name=\"select\"\n              id=\"exampleSelect\"\n              value={form.difficulty}\n              onChange={(e) => setForm({ ...form, difficulty: e.target.value })}\n            >\n              <option value=\"hard\">Hard</option>\n              <option value=\"medium\">Medium</option>\n              <option value=\"easy\">Easy</option>\n            </Input>\n          </Col>\n        </InputGroup>\n      </ModalBody>\n      <ModalFooter>\n        <Button color=\"primary\" onClick={handleSubmit}>\n          Begin\n        </Button>\n      </ModalFooter>\n    </Modal>\n  );\n};\n\nexport default CustomizeModal;\n","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { Row, Button } from \"reactstrap\";\nimport { fetchQuestionsThunk } from \"../store/quiz/thunk\";\nimport CustomizeModal from \"./CustomizeModal\";\n\nconst StartScreen = () => {\n  const [modalOpen, toggleModalOpen] = useState(false);\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const handleSubmit = () => {\n    dispatch(fetchQuestionsThunk()).then(() => {\n      history.push(\"/question/1\");\n    });\n  };\n\n  const toggle = () => {\n    toggleModalOpen(!modalOpen);\n  };\n\n  return (\n    <Row className=\"d-flex flex-column align-items-center\">\n      <p className=\"mt-4\">\n        You will be presented with 10 True or False Questions.\n      </p>\n      <p className=\"mt-4\">Can you score 100%?</p>\n      <Button color=\"primary\" onClick={handleSubmit}>\n        Begin\n      </Button>\n      <Button color=\"link\" onClick={toggle}>\n        customize\n      </Button>\n      <CustomizeModal\n        modalOpen={modalOpen}\n        toggleModalOpen={toggle}\n        submit={handleSubmit}\n      />\n    </Row>\n  );\n};\n\nexport default StartScreen;\n","import React, { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport parse from \"html-react-parser\";\nimport {\n  Row,\n  ListGroup,\n  ListGroupItem,\n  ListGroupItemHeading,\n  ListGroupItemText,\n  Button,\n} from \"reactstrap\";\nimport { getQuestions } from \"../store/quiz/selectors\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faCheckCircle,\n  faTimesCircle,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { setQuizHeader } from \"../store/quiz/actions\";\nimport { fetchQuestionsThunk } from \"../store/quiz/thunk\";\n\nconst ScoreScreen = () => {\n  const questions = useSelector((state) => getQuestions(state));\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  useEffect(() => {\n    dispatch(\n      setQuizHeader(\n        `You Scored ${\n          questions.filter((q) => q.correct_answer === q.response).length\n        } / ${questions.length}`\n      )\n    );\n    //eslint-disable-next-line\n  }, []);\n\n  const handleSubmit = () => {\n    dispatch(fetchQuestionsThunk()).then(() => {\n      history.push(\"/question/1\");\n    });\n  };\n\n  return (\n    <Row class=\"d-flex flex-column justify-content-center align-items-center\">\n      <ListGroup className=\"mb-2\">\n        {questions.map((q) => {\n          const correct = q.correct_answer === q.response;\n\n          return (\n            <ListGroupItem>\n              <ListGroupItemHeading>\n                <FontAwesomeIcon\n                  icon={correct ? faCheckCircle : faTimesCircle}\n                  color={correct ? \"green\" : \"red\"}\n                  size=\"1x\"\n                  className=\"mr-2\"\n                />\n                {parse(q.question)}\n              </ListGroupItemHeading>\n              <ListGroupItemText>\n                <p>\n                  Correct answer:{\" \"}\n                  <span className=\"font-weight-bold\">{q.correct_answer}</span>\n                </p>\n              </ListGroupItemText>\n            </ListGroupItem>\n          );\n        })}\n      </ListGroup>\n      <Button color=\"primary\" onClick={handleSubmit}>\n        Play again\n      </Button>\n    </Row>\n  );\n};\n\nexport default ScoreScreen;\n","import React, { useEffect } from \"react\";\nimport parse from \"html-react-parser\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Row, Card, Button } from \"reactstrap\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { getQuestion, getNumberOfQuestions } from \"../store/quiz/selectors\";\nimport { setQuestionResponse, setQuizHeader } from \"../store/quiz/actions\";\n\nconst Question = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const { idx } = useParams();\n  const parsedIdx = Number.parseInt(idx);\n  const question = useSelector((state) => getQuestion(state, idx));\n  const numberOfQuestions = useSelector((state) => getNumberOfQuestions(state));\n\n  useEffect(() => {\n    dispatch(setQuizHeader(question.category));\n  }, [question.category, dispatch]);\n\n  const handleClick = (response) => {\n    const nextIdx = parsedIdx + 1;\n    dispatch(setQuestionResponse({ idx: parsedIdx - 1, response }));\n    history.push(\n      parsedIdx >= numberOfQuestions ? \"/score\" : `/question/${nextIdx}`\n    );\n  };\n\n  return (\n    <Row className=\"d-flex flex-column align-items-center\">\n      <Card className=\"w-50 justify-content-center d-flex pt-4 pb-4 mb-4 mt-4\">\n        <h5 className=\"text-center mt-2 mb-2\">{parse(question.question)}</h5>\n      </Card>\n      <Row>\n        <Button\n          color=\"primary\"\n          className=\"mr-3\"\n          onClick={() => handleClick(\"True\")}\n        >\n          True\n        </Button>\n        <Button color=\"danger\" onClick={() => handleClick(\"False\")}>\n          False\n        </Button>\n      </Row>\n    </Row>\n  );\n};\n\nexport default Question;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Route, Redirect } from \"react-router\";\nimport { getQuestions } from \"../store/quiz/selectors\";\n\nconst PrivateRoute = ({ children, ...rest }) => {\n  const auth = useSelector((state) => getQuestions(state)).length !== 0;\n\n  return (\n    <Route\n      {...rest}\n      render={({ location }) =>\n        auth ? (\n          children\n        ) : (\n          <Redirect\n            to={{\n              pathname: \"/\",\n            }}\n          />\n        )\n      }\n    />\n  );\n};\n\nexport default PrivateRoute;\n","import React, { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Container } from \"reactstrap\";\nimport { Header, StartScreen, ScoreScreen, Question } from \"./components\";\nimport { fetchSessionTokenThunk } from \"./store/quiz/thunk\";\nimport PrivateRoute from \"./utils/PrivateRoute\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchSessionTokenThunk());\n    //eslint-disable-next-line\n  }, []);\n\n  return (\n    <Container className=\"d-flex justify-content-center align-items-center\">\n      <div>\n        <Header />\n        <Router>\n          <Switch>\n            <PrivateRoute path=\"/score\">\n              <ScoreScreen />\n            </PrivateRoute>\n            <PrivateRoute path=\"/question/:idx\">\n              <Question />\n            </PrivateRoute>\n            <Route path=\"/\">\n              <StartScreen />\n            </Route>\n          </Switch>\n        </Router>\n      </div>\n    </Container>\n  );\n}\n\nexport default App;\n","import { produce } from \"immer\";\n\nimport {\n  SET_FETCHED_QUESTIONS,\n  SET_QUESTION_RESPONSE,\n  SET_QUIZ_HEADER,\n  SET_API_TOKEN,\n  SET_QUIZ_DETAILS,\n  HANDLE_API_ERROR,\n  HANDLE_API_FETCHING,\n  RESET_QUIZ,\n} from \"./actions\";\n\nconst state = {\n  questions: [],\n  status: \"Initial\",\n  message: \"\",\n  header: \"Truthy Falsy Quiz\",\n  token: \"\",\n  numberOfQuestions: 10,\n  difficulty: \"hard\",\n};\n\nexport const path = [\"uiStore\", \"smartStackerListView\", \"filters\"];\n\nconst reducer = produce<any>((base: any, action: any) => {\n  switch (action.type) {\n    case SET_FETCHED_QUESTIONS: {\n      base.status = \"Success\";\n      base.questions = action.payload;\n      break;\n    }\n    case SET_QUESTION_RESPONSE: {\n      base.questions[action.payload.idx] = {\n        ...base.questions[action.payload.idx],\n        response: action.payload.response,\n      };\n\n      break;\n    }\n    case SET_QUIZ_HEADER: {\n      base.header = action.payload;\n      break;\n    }\n    case SET_API_TOKEN: {\n      base.status = \"Success\";\n      base.token = action.payload;\n      break;\n    }\n    case SET_QUIZ_DETAILS: {\n      base.numberOfQuestions = action.payload.number;\n      base.difficulty = action.payload.difficulty;\n      break;\n    }\n    case HANDLE_API_ERROR: {\n      base.status = \"Error\";\n      base.message = action.payload;\n      break;\n    }\n    case HANDLE_API_FETCHING:\n      base.status = \"Fetching\";\n      break;\n    case RESET_QUIZ:\n      base = state;\n  }\n}, state);\n\nexport default reducer;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport quizReducer from \"./quiz/reducers\";\n\nexport const store = configureStore({\n  reducer: {\n    quiz: quizReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { store } from \"./store/store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}